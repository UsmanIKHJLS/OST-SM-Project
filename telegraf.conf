[global_tags]

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = "192.168.xxx.xxx"
  omit_hostname = false

# Output para o InfluxDB

[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "influx"
  timeout = "5s"
  username = "telegraf"
  password = "metricsmetricsmetricsmetrics"

  fieldpass = [
     "frame.time_delta",      # Já transformado
    "frame.time_relative",
    "frame.len",
    "ip.src",
    "ip.dst",
    "tcp.dstport",
    "tcp.flags",             # Mantido para análise
    "tcp.time_delta",        # Já transformado
    "tcp.len",
    "tcp.ack",
    "tcp.connection.fin",
    "tcp.connection.rst",
    "tcp.connection.sack",
    "tcp.connection.syn",
    "tcp.flags.ack",         # Já transformado
    "tcp.flags.fin",
    "tcp.flags.push",        # Já transformado
    "tcp.flags.reset",
    "tcp.flags.syn",
    "tcp.hdr_len",
    "tcp.pdu.size",
    "tcp.window_size_value",
    "mqtt.conack.flags",
    "mqtt.conflags",
    "mqtt.dupflag",
    "mqtt.hdrflags",         # Já transformado
    "mqtt.len",
    "mqtt.msgtype",          # Já transformado
    "mqtt.qos",              # Já transformado
    "mqtt.topic",
    "mqtt.topic_len",
    "mqtt.ver",              # Já transformado
    "ip.ttl",
    "class",                 # Considerado como rótulo de classificação
    "label"          
    ]


# Input para coleta de métricas do sistema
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# Input para consumir dados do Kafka
[[inputs.kafka_consumer]]
  brokers = ["kafka:9092"]
  topics = ["kf-topic"]
  consumer_group = "telegraf_metrics_consumer"
  offset = "oldest"
  data_format = "json"

  json_string_fields = [
    "frame.time_delta",      # Já transformado
    "frame.time_relative",
    "frame.len",
    "ip.src",
    "ip.dst",
    "tcp.dstport",
    "tcp.flags",             # Mantido para análise
    "tcp.time_delta",        # Já transformado
    "tcp.len",
    "tcp.ack",
    "tcp.connection.fin",
    "tcp.connection.rst",
    "tcp.connection.sack",
    "tcp.connection.syn",
    "tcp.flags.ack",         # Já transformado
    "tcp.flags.fin",
    "tcp.flags.push",        # Já transformado
    "tcp.flags.reset",
    "tcp.flags.syn",
    "tcp.hdr_len",
    "tcp.pdu.size",
    "tcp.window_size_value",
    "mqtt.conack.flags",
    "mqtt.conflags",
    "mqtt.dupflag",
    "mqtt.hdrflags",         # Já transformado
    "mqtt.len",
    "mqtt.msgtype",          # Já transformado
    "mqtt.qos",              # Já transformado
    "mqtt.topic",
    "mqtt.topic_len",
    "mqtt.ver",              # Já transformado
    "ip.ttl",
    "class",                 # Considerado como rótulo de classificação
    "label"                  # Campo transformado para indicar o rótulo predito
]

  name_override = "kafka_topic"